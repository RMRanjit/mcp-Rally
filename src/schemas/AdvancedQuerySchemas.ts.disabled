/**
 * Advanced Query Schema Definitions
 *
 * Schema definitions for enhanced MCP tools that leverage the advanced query system.
 * These schemas support complex query construction, optimization, and performance monitoring.
 *
 * Requirements: req-004, req-006, req-010, req-019, req-020
 */

import { z } from 'zod';

// Base query execution options schema
export const QueryExecutionOptionsSchema = z.object({
  useCache: z.boolean().optional().default(true),
  optimize: z.boolean().optional().default(true),
  includeMetrics: z.boolean().optional().default(false),
  timeout: z.number().positive().optional(),
  retryCount: z.number().min(0).max(3).optional().default(0),
});

// Cache options schema
export const CacheOptionsSchema = z.object({
  ttl: z.number().positive().optional(),
  priority: z.enum(['low', 'normal', 'high']).optional().default('normal'),
  invalidateOnUpdate: z.boolean().optional().default(false),
  tags: z.array(z.string()).optional(),
});

// Pagination options schema
export const PaginationOptionsSchema = z.object({
  cursor: z.string().optional(),
  limit: z.number().positive().max(200).optional().default(50),
  direction: z.enum(['forward', 'backward']).optional().default('forward'),
});

// Date range filter schema
export const DateRangeFilterSchema = z.object({
  field: z.string().min(1),
  startDate: z.string().datetime().optional(),
  endDate: z.string().datetime().optional(),
  relative: z.enum(['today', 'yesterday', 'last_week', 'last_month', 'last_quarter']).optional(),
});

// Numeric range filter schema
export const NumericRangeFilterSchema = z.object({
  field: z.string().min(1),
  min: z.number().optional(),
  max: z.number().optional(),
  operator: z.enum(['between', 'gt', 'gte', 'lt', 'lte', 'eq', 'ne']).optional().default('between'),
});

// Text filter schema
export const TextFilterSchema = z.object({
  field: z.string().min(1),
  value: z.string().min(1),
  operator: z.enum(['contains', 'startswith', 'endswith', 'equals', 'regex']).optional().default('contains'),
  caseSensitive: z.boolean().optional().default(false),
});

// Logical group schema for complex queries
export const LogicalGroupSchema = z.object({
  operator: z.enum(['AND', 'OR']),
  conditions: z.array(z.union([
    z.object({
      field: z.string(),
      operator: z.enum(['eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startswith', 'endswith', 'in', 'notin', 'null', 'notnull']),
      value: z.union([z.string(), z.number(), z.boolean(), z.array(z.union([z.string(), z.number()]))]).optional(),
    }),
    z.lazy(() => LogicalGroupSchema)
  ])),
  not: z.boolean().optional().default(false),
});

// Advanced query builder schema
export const AdvancedQueryBuilderSchema = z.object({
  artifactType: z.enum(['UserStory', 'HierarchicalRequirement', 'Defect', 'Task', 'Project', 'User', 'Iteration']),
  fields: z.array(z.string()).optional(),
  conditions: LogicalGroupSchema.optional(),
  orderBy: z.array(z.object({
    field: z.string().min(1),
    direction: z.enum(['asc', 'desc']).optional().default('asc'),
  })).optional(),
  workspace: z.string().optional(),
  project: z.string().optional(),
  limit: z.number().positive().max(1000).optional(),
  offset: z.number().min(0).optional(),
  optimizeFields: z.boolean().optional().default(true),
  includeMetadata: z.boolean().optional().default(false),
});

// Enhanced query request schema
export const EnhancedQueryRequestSchema = z.object({
  artifactType: z.enum(['UserStory', 'HierarchicalRequirement', 'Defect', 'Task', 'Project', 'User', 'Iteration']),
  query: z.union([
    AdvancedQueryBuilderSchema,
    z.record(z.any()) // Allow raw Rally query format
  ]),
  executionOptions: QueryExecutionOptionsSchema.optional(),
  cacheOptions: CacheOptionsSchema.optional(),
  pagination: PaginationOptionsSchema.optional(),
});

// Batch query request schema
export const BatchQueryRequestSchema = z.object({
  queries: z.array(EnhancedQueryRequestSchema).min(1).max(10),
  executionMode: z.enum(['parallel', 'sequential']).optional().default('parallel'),
  priority: z.enum(['low', 'normal', 'high']).optional().default('normal'),
  maxBatchSize: z.number().positive().max(20).optional().default(10),
});

// Complex filter schema for dashboard-style queries
export const ComplexFilterSchema = z.object({
  artifactType: z.enum(['UserStory', 'Defect', 'Task']),

  // Project and iteration filters
  project: z.string().optional(),
  iteration: z.string().optional(),
  release: z.string().optional(),

  // Owner and assignment filters
  owner: z.string().optional(),
  team: z.string().optional(),

  // State and status filters
  states: z.array(z.string()).optional(),
  scheduleStates: z.array(z.string()).optional(), // For UserStory
  severities: z.array(z.string()).optional(), // For Defect
  priorities: z.array(z.string()).optional(), // For Defect

  // Date filters
  createdDateRange: DateRangeFilterSchema.optional(),
  updatedDateRange: DateRangeFilterSchema.optional(),

  // Numeric filters
  planEstimateRange: NumericRangeFilterSchema.optional(),
  actualHoursRange: NumericRangeFilterSchema.optional(), // For Task

  // Text filters
  nameFilter: TextFilterSchema.optional(),
  descriptionFilter: TextFilterSchema.optional(),

  // Custom field filters
  customFields: z.array(z.object({
    fieldName: z.string().min(1),
    value: z.union([z.string(), z.number(), z.boolean()]),
    operator: z.enum(['eq', 'ne', 'contains', 'gt', 'lt']).optional().default('eq'),
  })).optional(),

  // Advanced options
  includeChildren: z.boolean().optional().default(false),
  includeTasks: z.boolean().optional().default(false),
  includeTestCases: z.boolean().optional().default(false),

  // Query optimization
  optimizeForPerformance: z.boolean().optional().default(true),
  maxResults: z.number().positive().max(1000).optional().default(100),
});

// Analytics query schema for reporting
export const AnalyticsQuerySchema = z.object({
  reportType: z.enum(['velocity', 'burndown', 'cycle_time', 'defect_trends', 'completion_rate']),
  artifactType: z.enum(['UserStory', 'Defect', 'Task']),

  // Time range for analytics
  timeRange: z.object({
    startDate: z.string().datetime(),
    endDate: z.string().datetime(),
    granularity: z.enum(['day', 'week', 'month', 'iteration']).optional().default('week'),
  }),

  // Scope filters
  project: z.string().optional(),
  team: z.string().optional(),
  iteration: z.string().optional(),

  // Grouping and aggregation
  groupBy: z.array(z.enum(['project', 'owner', 'state', 'severity', 'priority', 'iteration'])).optional(),
  aggregations: z.array(z.enum(['count', 'sum', 'avg', 'min', 'max'])).optional().default(['count']),

  // Chart and visualization options
  chartType: z.enum(['line', 'bar', 'pie', 'scatter', 'heatmap']).optional().default('line'),
  includeRawData: z.boolean().optional().default(false),

  // Cache settings for analytics
  cacheForMinutes: z.number().positive().max(1440).optional().default(60), // 1 hour default
});

// Query optimization result schema
export const QueryOptimizationSchema = z.object({
  analyze: z.boolean().optional().default(true),
  suggestImprovements: z.boolean().optional().default(true),
  includeComplexityScore: z.boolean().optional().default(true),
  includeFieldUsageStats: z.boolean().optional().default(false),
  includePerformanceHistory: z.boolean().optional().default(false),
});

// Cache management schema
export const CacheManagementSchema = z.object({
  action: z.enum(['invalidate', 'clear', 'stats', 'warmup']),
  targets: z.object({
    artifactType: z.string().optional(),
    projectRef: z.string().optional(),
    tags: z.array(z.string()).optional(),
    objectId: z.string().optional(),
  }).optional(),
  warmupQueries: z.array(z.object({
    artifactType: z.string(),
    query: z.record(z.any()),
    cacheOptions: CacheOptionsSchema.optional(),
  })).optional(),
});

// Performance monitoring schema
export const PerformanceMonitoringSchema = z.object({
  timeRange: z.object({
    hours: z.number().positive().max(168).optional().default(24), // Last 24 hours default
  }).optional(),
  metrics: z.array(z.enum([
    'query_count',
    'cache_hit_rate',
    'average_execution_time',
    'slow_queries',
    'memory_usage',
    'optimization_rate'
  ])).optional(),
  includeDetails: z.boolean().optional().default(false),
  groupBy: z.enum(['hour', 'artifact_type', 'query_pattern']).optional(),
});

// Type exports for TypeScript
export type QueryExecutionOptions = z.infer<typeof QueryExecutionOptionsSchema>;
export type CacheOptions = z.infer<typeof CacheOptionsSchema>;
export type PaginationOptions = z.infer<typeof PaginationOptionsSchema>;
export type DateRangeFilter = z.infer<typeof DateRangeFilterSchema>;
export type NumericRangeFilter = z.infer<typeof NumericRangeFilterSchema>;
export type TextFilter = z.infer<typeof TextFilterSchema>;
export type LogicalGroup = z.infer<typeof LogicalGroupSchema>;
export type AdvancedQueryBuilder = z.infer<typeof AdvancedQueryBuilderSchema>;
export type EnhancedQueryRequest = z.infer<typeof EnhancedQueryRequestSchema>;
export type BatchQueryRequest = z.infer<typeof BatchQueryRequestSchema>;
export type ComplexFilter = z.infer<typeof ComplexFilterSchema>;
export type AnalyticsQuery = z.infer<typeof AnalyticsQuerySchema>;
export type QueryOptimization = z.infer<typeof QueryOptimizationSchema>;
export type CacheManagement = z.infer<typeof CacheManagementSchema>;
export type PerformanceMonitoring = z.infer<typeof PerformanceMonitoringSchema>;

// Export all schemas for use in MCP tools
export const AdvancedQuerySchemas = {
  QueryExecutionOptionsSchema,
  CacheOptionsSchema,
  PaginationOptionsSchema,
  DateRangeFilterSchema,
  NumericRangeFilterSchema,
  TextFilterSchema,
  LogicalGroupSchema,
  AdvancedQueryBuilderSchema,
  EnhancedQueryRequestSchema,
  BatchQueryRequestSchema,
  ComplexFilterSchema,
  AnalyticsQuerySchema,
  QueryOptimizationSchema,
  CacheManagementSchema,
  PerformanceMonitoringSchema,
};