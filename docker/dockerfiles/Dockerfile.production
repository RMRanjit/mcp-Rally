# Rally MCP Server - Production Dockerfile
# Multi-stage build for optimized production container

# Stage 1: Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY src/ ./src/

# Build the TypeScript application
RUN npm run build

# Stage 2: Production stage
FROM node:18-alpine AS production

# Create app user for security
RUN addgroup -g 1001 -S rallymcp && \
    adduser -S rallymcp -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --omit=dev && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Copy startup scripts
COPY scripts/ ./scripts/

# Create necessary directories and set permissions
RUN mkdir -p /app/logs && \
    chown -R rallymcp:rallymcp /app

# Switch to non-root user
USER rallymcp

# Expose ports
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Environment variables with defaults
ENV NODE_ENV=production
ENV RALLY_TRANSPORT=sse
ENV RALLY_SERVER_PORT=3000
ENV RALLY_SERVER_HOST=0.0.0.0

# Default command
CMD ["npm", "run", "prod:start"]